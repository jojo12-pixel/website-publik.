
<html><head><base href="/" /><meta charset="utf-8" /><style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: system-ui, -apple-system, sans-serif;
}

body {
  background: #1e1e1e;
  color: #e0e0e0;
  min-height: 100vh;
  padding: 20px;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  background: #2d2d2d;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

h1 {
  color: #ffffff;
  margin-bottom: 30px;
  font-size: 24px;
}

.image-upload {
  border: 2px dashed #404040;
  border-radius: 8px;
  padding: 30px;
  text-align: center;
  margin-bottom: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.image-upload:hover {
  border-color: #2563eb;
  background: #333333;
}

.preview {
  max-width: 100%;
  margin: 20px 0;
  border-radius: 8px;
  display: none;
}

.result {
  background: #333333;
  padding: 20px;
  border-radius: 8px;
  margin-top: 20px;
  line-height: 1.6;
}

.loading {
  display: none;
  margin: 20px 0;
  text-align: center;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #333;
  border-top: 4px solid #2563eb;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 15px;
}

.button-group {
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
  margin: 20px 0;
}

.action-button {
  background: #2563eb;
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.action-button:hover {
  background: #1d4ed8;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.sidebar {
  position: fixed;
  left: 0;
  top: 0;
  width: 250px;
  height: 100vh;
  background: #252525;
  padding: 20px;
  border-right: 1px solid #333;
}

.main-content {
  margin-left: 250px;
  padding: 20px;
}

@media (max-width: 768px) {
  .sidebar {
    display: none;
  }
  .main-content {
    margin-left: 0;
  }
}
</style></head><body>
<div class="sidebar">
  <h3 style="margin-bottom: 20px; color: #fff;">Recent Analyses</h3>
  <div id="history"></div>
</div>

<div class="main-content">
  <div class="container">
    <h1>What can I help with?</h1>
    
    <div class="button-group">
      <button class="action-button" onclick="document.getElementById('fileInput').click()">
        Create image analysis
      </button>
      <button class="action-button">Summarize text</button>
      <button class="action-button">Brainstorm</button>
      <button class="action-button">Get advice</button>
      <button class="action-button">Surprise me</button>
    </div>

    <div class="image-upload" id="dropZone">
      <input type="file" id="fileInput" accept="image/*" style="display: none">
      <p>Click or drag image here to analyze</p>
    </div>

    <img id="preview" class="preview">
    
    <div class="loading" id="loading">
      <div class="spinner"></div>
      <p>Analyzing image...</p>
    </div>

    <div class="result" id="result"></div>
  </div>
</div>

<script>
const GEMINI_API_KEY = 'AIzaSyDw1rKVsWRLadxjqsp-FagiEzxFRC2Kfes';

async function analyzeImage(base64Image) {
  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [
            { text: "Please describe the style and characteristics of this image in detail:" },
            { inlineData: { data: base64Image, mimeType: "image/jpeg" } }
          ]
        }]
      })
    });

    const data = await response.json();
    const analysis = data.candidates[0].content.parts[0].text;
    
    // Add to history
    addToHistory(analysis);
    
    return analysis;
  } catch (error) {
    console.error('Error:', error);
    return 'Error analyzing image. Please try again.';
  }
}

function addToHistory(analysis) {
  const historyDiv = document.getElementById('history');
  const entry = document.createElement('div');
  entry.style.padding = '10px';
  entry.style.borderBottom = '1px solid #333';
  entry.style.marginBottom = '10px';
  entry.style.fontSize = '14px';
  entry.style.color = '#e0e0e0';
  entry.textContent = analysis.substring(0, 100) + '...';
  historyDiv.insertBefore(entry, historyDiv.firstChild);
}

document.getElementById('dropZone').addEventListener('click', () => {
  document.getElementById('fileInput').click();
});

document.getElementById('fileInput').addEventListener('change', handleFileSelect);
document.getElementById('dropZone').addEventListener('dragover', handleDragOver);
document.getElementById('dropZone').addEventListener('drop', handleDrop);

function handleDragOver(e) {
  e.preventDefault();
  e.stopPropagation();
}

function handleDrop(e) {
  e.preventDefault();
  e.stopPropagation();
  
  const dt = e.dataTransfer;
  const files = dt.files;

  handleFiles(files);
}

function handleFileSelect(e) {
  const files = e.target.files;
  handleFiles(files);
}

function handleFiles(files) {
  const file = files[0];
  if (file && file.type.startsWith('image/')) {
    const reader = new FileReader();
    
    reader.onload = async function(e) {
      const preview = document.getElementById('preview');
      preview.src = e.target.result;
      preview.style.display = 'block';
      
      document.getElementById('loading').style.display = 'block';
      document.getElementById('result').innerHTML = '';
      
      const base64Image = e.target.result.split(',')[1];
      const analysis = await analyzeImage(base64Image);
      
      document.getElementById('loading').style.display = 'none';
      document.getElementById('result').innerHTML = `<h3>Analysis Result:</h3><p>${analysis}</p>`;
    };
    
    reader.readAsDataURL(file);
  } else {
    alert('Please upload an image file');
  }
}
</script></body></html>
